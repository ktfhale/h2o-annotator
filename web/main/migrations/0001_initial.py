# Generated by Django 2.2.4 on 2019-10-07 14:47

import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.indexes
from django.contrib.postgres.operations import BtreeGinExtension
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        BtreeGinExtension(),
        migrations.CreateModel(
            name='Annotation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('collage_id', models.IntegerField(blank=True, null=True)),
                ('annotation', models.CharField(blank=True, max_length=10240, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('cloned', models.BooleanField(default=False)),
                ('xpath_start', models.CharField(blank=True, max_length=255, null=True)),
                ('xpath_end', models.CharField(blank=True, max_length=255, null=True)),
                ('start_offset', models.IntegerField(default=0)),
                ('end_offset', models.IntegerField(default=0)),
                ('link', models.CharField(blank=True, max_length=255, null=True)),
                ('hidden', models.BooleanField(default=False)),
                ('highlight_only', models.CharField(blank=True, max_length=255, null=True)),
                ('annotated_item_id', models.IntegerField(default=0)),
                ('annotated_item_type', models.CharField(default='Collage', max_length=255)),
                ('error', models.BooleanField(default=False)),
                ('feedback', models.BooleanField(default=False)),
                ('discussion', models.BooleanField(default=False)),
                ('user_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'annotations',
            },
        ),
        migrations.CreateModel(
            name='ArInternalMetadata',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('value', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'ar_internal_metadata',
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name_abbreviation', models.CharField(max_length=150)),
                ('name', models.CharField(blank=True, max_length=10000, null=True)),
                ('decision_date', models.DateField(blank=True, null=True)),
                ('public', models.BooleanField(blank=True, default=False, null=True)),
                ('created_via_import', models.BooleanField(default=False)),
                ('capapi_id', models.IntegerField(blank=True, null=True)),
                ('attorneys', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('parties', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('opinions', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('citations', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('docket_number', models.CharField(blank=True, max_length=20000, null=True)),
                ('header_html', models.CharField(blank=True, max_length=15360, null=True)),
                ('content', models.CharField(max_length=5242880)),
                ('annotations_count', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'cases',
            },
        ),
        migrations.CreateModel(
            name='CaseCourt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name_abbreviation', models.CharField(blank=True, max_length=150, null=True)),
                ('name', models.CharField(blank=True, max_length=500, null=True)),
                ('capapi_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'case_courts',
            },
        ),
        migrations.CreateModel(
            name='CkeditorAsset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_file_name', models.CharField(max_length=255)),
                ('data_content_type', models.CharField(blank=True, max_length=255, null=True)),
                ('data_file_size', models.IntegerField(blank=True, null=True)),
                ('assetable_id', models.IntegerField(blank=True, null=True)),
                ('assetable_type', models.CharField(blank=True, max_length=30, null=True)),
                ('type', models.CharField(blank=True, max_length=30, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ckeditor_assets',
            },
        ),
        migrations.CreateModel(
            name='Collage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('annotatable_type', models.CharField(blank=True, max_length=255, null=True)),
                ('annotatable_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(max_length=250)),
                ('description', models.CharField(blank=True, max_length=5120, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('word_count', models.IntegerField(blank=True, null=True)),
                ('ancestry', models.CharField(blank=True, max_length=255, null=True)),
                ('public', models.BooleanField(blank=True, default=True, null=True)),
                ('readable_state', models.CharField(blank=True, max_length=5242880, null=True)),
                ('words_shown', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField(default=0)),
                ('annotator_version', models.IntegerField(default=2)),
                ('featured', models.BooleanField(default=False)),
                ('created_via_import', models.BooleanField(default=False)),
                ('version', models.IntegerField(default=1)),
                ('enable_feedback', models.BooleanField(default=True)),
                ('enable_discussions', models.BooleanField(default=False)),
                ('enable_responses', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'collages',
            },
        ),
        migrations.CreateModel(
            name='ContentAnnotation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('start_paragraph', models.IntegerField()),
                ('end_paragraph', models.IntegerField(blank=True, null=True)),
                ('start_offset', models.IntegerField()),
                ('end_offset', models.IntegerField()),
                ('kind', models.CharField(max_length=255)),
                ('content', models.TextField(blank=True, null=True)),
                ('global_start_offset', models.IntegerField(blank=True, null=True)),
                ('global_end_offset', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'content_annotations',
            },
        ),
        migrations.CreateModel(
            name='ContentCollaborator',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('has_attribution', models.BooleanField(default=False)),
                ('role', models.CharField(blank=True, choices=[('owner', 'owner'), ('editor', 'editor')], max_length=255, null=True)),
            ],
            options={
                'db_table': 'content_collaborators',
            },
        ),
        migrations.CreateModel(
            name='ContentImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('page_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('image_file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('image_content_type', models.CharField(blank=True, max_length=255, null=True)),
                ('image_file_size', models.IntegerField(blank=True, null=True)),
                ('image_updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'content_images',
            },
        ),
        migrations.CreateModel(
            name='ContentNode',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, max_length=10000, null=True)),
                ('slug', models.CharField(blank=True, max_length=10000, null=True)),
                ('subtitle', models.CharField(blank=True, max_length=10000, null=True)),
                ('public', models.BooleanField(default=False)),
                ('cloneable', models.BooleanField(default=True)),
                ('draft_mode_of_published_casebook', models.BooleanField(blank=True, help_text='Unknown (None) or True; never False', null=True)),
                ('ancestry', models.CharField(blank=True, help_text='List of parent IDs in tree, separated by slashes.', max_length=255, null=True)),
                ('ordinals', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), default=list, size=None)),
                ('headnote', models.TextField(blank=True, null=True)),
                ('raw_headnote', models.TextField(blank=True, null=True)),
                ('resource_type', models.CharField(blank=True, max_length=255, null=True)),
                ('resource_id', models.BigIntegerField(blank=True, null=True)),
                ('is_alias', models.BooleanField(blank=True, null=True)),
                ('playlist_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'content_nodes',
            },
        ),
        migrations.CreateModel(
            name='Default',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=1024, null=True)),
                ('description', models.CharField(blank=True, max_length=5242880, null=True)),
                ('url', models.CharField(max_length=1024)),
                ('public', models.BooleanField(default=True, null=True)),
                ('content_type', models.CharField(blank=True, max_length=255, null=True)),
                ('ancestry', models.CharField(blank=True, max_length=255, null=True)),
                ('created_via_import', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'defaults',
            },
        ),
        migrations.CreateModel(
            name='DelayedJob',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(blank=True, default=0, null=True)),
                ('attempts', models.IntegerField(blank=True, default=0, null=True)),
                ('handler', models.TextField(blank=True, null=True)),
                ('last_error', models.TextField(blank=True, null=True)),
                ('run_at', models.DateTimeField(blank=True, null=True)),
                ('locked_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('locked_by', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('queue', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'delayed_jobs',
            },
        ),
        migrations.CreateModel(
            name='FrozenItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(blank=True, null=True)),
                ('version', models.IntegerField()),
                ('item_id', models.IntegerField()),
                ('item_type', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'frozen_items',
            },
        ),
        migrations.CreateModel(
            name='Media',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('media_type_id', models.IntegerField(blank=True, null=True)),
                ('public', models.BooleanField(blank=True, default=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=5242880, null=True)),
                ('user_id', models.IntegerField(default=0)),
                ('created_via_import', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'medias',
            },
        ),
        migrations.CreateModel(
            name='MediaType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'media_types',
            },
        ),
        migrations.CreateModel(
            name='Metadata',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contributor', models.CharField(blank=True, max_length=255, null=True)),
                ('coverage', models.CharField(blank=True, max_length=255, null=True)),
                ('creator', models.CharField(blank=True, max_length=255, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('description', models.CharField(blank=True, max_length=5242880, null=True)),
                ('format', models.CharField(blank=True, max_length=255, null=True)),
                ('identifier', models.CharField(blank=True, max_length=255, null=True)),
                ('language', models.CharField(blank=True, default='en', max_length=255, null=True)),
                ('publisher', models.CharField(blank=True, max_length=255, null=True)),
                ('relation', models.CharField(blank=True, max_length=255, null=True)),
                ('rights', models.CharField(blank=True, max_length=255, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('subject', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('dc_type', models.CharField(blank=True, default='Text', max_length=255, null=True)),
                ('classifiable_type', models.CharField(blank=True, max_length=255, null=True)),
                ('classifiable_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'metadata',
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('page_title', models.CharField(max_length=255)),
                ('slug', models.CharField(max_length=255)),
                ('content', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('footer_link', models.BooleanField(default=False)),
                ('footer_link_text', models.CharField(blank=True, max_length=255, null=True)),
                ('footer_sort', models.IntegerField(default=1000)),
                ('is_user_guide', models.BooleanField(default=False)),
                ('user_guide_sort', models.IntegerField(default=1000)),
                ('user_guide_link_text', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'pages',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(blank=True, max_length=255, null=True)),
                ('label', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('permission_type', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'permissions',
            },
        ),
        migrations.CreateModel(
            name='PermissionAssignment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_collection_id', models.IntegerField(blank=True, null=True)),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('permission_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'permission_assignments',
            },
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=1024, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('public', models.BooleanField(blank=True, default=True, null=True)),
                ('ancestry', models.CharField(blank=True, max_length=255, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('counter_start', models.IntegerField(default=1)),
                ('location_id', models.IntegerField(blank=True, null=True)),
                ('when_taught', models.CharField(blank=True, max_length=255, null=True)),
                ('user_id', models.IntegerField(default=0)),
                ('primary', models.BooleanField(default=False)),
                ('featured', models.BooleanField(default=False)),
                ('created_via_import', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'playlists',
            },
        ),
        migrations.CreateModel(
            name='PlaylistItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playlist_id', models.IntegerField(blank=True, null=True)),
                ('position', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('public_notes', models.BooleanField(default=True)),
                ('actual_object_type', models.CharField(blank=True, max_length=255, null=True)),
                ('actual_object_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'playlist_items',
            },
        ),
        migrations.CreateModel(
            name='PlaylistsUserCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('playlist_id', models.IntegerField(blank=True, null=True)),
                ('user_collection_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'playlists_user_collections',
            },
        ),
        migrations.CreateModel(
            name='RawContent',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField(blank=True, null=True)),
                ('source_type', models.CharField(blank=True, max_length=50, null=True)),
                ('source_id', models.BigIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'raw_contents',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(blank=True, max_length=40, null=True)),
                ('authorizable_type', models.CharField(blank=True, max_length=40, null=True)),
                ('authorizable_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'roles',
            },
        ),
        migrations.CreateModel(
            name='RolesUser',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
            options={
                'db_table': 'roles_users',
            },
        ),
        migrations.CreateModel(
            name='SchemaMigration',
            fields=[
                ('version', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'schema_migrations',
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('session_id', models.CharField(max_length=255)),
                ('data', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sessions',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('taggings_count', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'db_table': 'tags',
            },
        ),
        migrations.CreateModel(
            name='Tagging',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_id', models.IntegerField(blank=True, null=True)),
                ('taggable_id', models.IntegerField(blank=True, null=True)),
                ('tagger_id', models.IntegerField(blank=True, null=True)),
                ('tagger_type', models.CharField(blank=True, max_length=255, null=True)),
                ('taggable_type', models.CharField(blank=True, max_length=255, null=True)),
                ('context', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'taggings',
            },
        ),
        migrations.CreateModel(
            name='UserCollection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.CharField(blank=True, max_length=255, null=True)),
                ('created_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user_collections',
            },
        ),
        migrations.CreateModel(
            name='UserCollectionsUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField(blank=True, null=True)),
                ('user_collection_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'user_collections_users',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('login', models.CharField(blank=True, max_length=255, null=True)),
                ('email_address', models.CharField(blank=True, max_length=255, null=True)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('attribution', models.CharField(default='Anonymous', max_length=255)),
                ('affiliation', models.CharField(blank=True, max_length=255, null=True)),
                ('verified_email', models.BooleanField(default=False)),
                ('verified_professor', models.BooleanField(default=False)),
                ('professor_verification_requested', models.BooleanField(default=False)),
                ('login_count', models.IntegerField(default=0)),
                ('last_request_at', models.DateTimeField(blank=True, null=True)),
                ('last_login_at', models.DateTimeField(blank=True, null=True)),
                ('current_login_at', models.DateTimeField(blank=True, null=True)),
                ('last_login_ip', models.CharField(blank=True, max_length=255, null=True)),
                ('current_login_ip', models.CharField(blank=True, max_length=255, null=True)),
                ('crypted_password', models.CharField(blank=True, max_length=255, null=True)),
                ('password_salt', models.CharField(blank=True, max_length=255, null=True)),
                ('persistence_token', models.CharField(max_length=255)),
                ('oauth_token', models.CharField(blank=True, max_length=255, null=True)),
                ('oauth_secret', models.CharField(blank=True, max_length=255, null=True)),
                ('perishable_token', models.CharField(blank=True, max_length=255, null=True)),
                ('tz_name', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('canvas_id', models.CharField(blank=True, max_length=255, null=True)),
                ('default_font', models.CharField(blank=True, default='futura', max_length=255, null=True)),
                ('default_font_size', models.CharField(blank=True, default=10, max_length=255, null=True)),
                ('print_titles', models.BooleanField(default=True)),
                ('print_dates_details', models.BooleanField(default=True)),
                ('print_paragraph_numbers', models.BooleanField(default=True)),
                ('print_annotations', models.BooleanField(default=False)),
                ('print_highlights', models.CharField(default='original', max_length=255)),
                ('print_font_face', models.CharField(default='dagny', max_length=255)),
                ('print_font_size', models.CharField(default='small', max_length=255)),
                ('default_show_comments', models.BooleanField(default=False)),
                ('default_show_paragraph_numbers', models.BooleanField(default=True)),
                ('hidden_text_display', models.BooleanField(default=False)),
                ('print_links', models.BooleanField(default=True)),
                ('toc_levels', models.CharField(default='', max_length=255)),
                ('print_export_format', models.CharField(default='', max_length=255)),
                ('image_file_name', models.CharField(blank=True, max_length=255, null=True)),
                ('image_content_type', models.CharField(blank=True, max_length=255, null=True)),
                ('image_file_size', models.IntegerField(blank=True, null=True)),
                ('image_updated_at', models.DateTimeField(blank=True, null=True)),
                ('roles', models.ManyToManyField(through='main.RolesUser', to='main.Role')),
            ],
            options={
                'db_table': 'users',
            },
        ),
        migrations.CreateModel(
            name='UnpublishedRevision',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('field', models.CharField(max_length=255)),
                ('value', models.CharField(blank=True, max_length=50000, null=True)),
                ('annotation', models.ForeignKey(blank=True, db_constraint=False, db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.ContentAnnotation')),
                ('node', models.ForeignKey(blank=True, db_constraint=False, db_index=False, help_text='Node in the draft.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='revisions', to='main.ContentNode')),
                ('node_parent', models.ForeignKey(blank=True, db_constraint=False, db_index=False, help_text='Corresponding node in the original, published casebook.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='draft_revisions', to='main.ContentNode')),
            ],
            options={
                'db_table': 'unpublished_revisions',
            },
        ),
        migrations.CreateModel(
            name='TextBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.CharField(blank=True, max_length=5242880, null=True)),
                ('content', models.CharField(max_length=5242880)),
                ('version', models.IntegerField(default=1)),
                ('public', models.BooleanField(blank=True, default=True, null=True)),
                ('created_via_import', models.BooleanField(default=False)),
                ('annotations_count', models.IntegerField(blank=True, default=0, null=True)),
                ('enable_feedback', models.BooleanField(default=True)),
                ('enable_discussions', models.BooleanField(default=False)),
                ('enable_responses', models.BooleanField(default=False)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, db_index=False, default=0, null=True, on_delete=django.db.models.deletion.PROTECT, to='main.User')),
            ],
            options={
                'db_table': 'text_blocks',
            },
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['context'], name='taggings_context_12c269_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['tag_id'], name='taggings_tag_id_8569d0_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['taggable_id', 'taggable_type', 'context'], name='taggings_taggabl_559cf2_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['taggable_id', 'taggable_type', 'tagger_id', 'context'], name='taggings_taggabl_fc4c3b_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['taggable_id'], name='taggings_taggabl_78f0d4_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['taggable_type'], name='taggings_taggabl_7d4711_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['tagger_id', 'tagger_type'], name='taggings_tagger__6a7018_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['tagger_id'], name='taggings_tagger__45521d_idx'),
        ),
        migrations.AddIndex(
            model_name='tagging',
            index=models.Index(fields=['tagger_type'], name='taggings_tagger__62eac1_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tagging',
            unique_together={('tag_id', 'taggable_id', 'taggable_type', 'context', 'tagger_id', 'tagger_type')},
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['taggings_count'], name='tags_tagging_a73a28_idx'),
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['session_id'], name='sessions_session_0947d2_idx'),
        ),
        migrations.AddIndex(
            model_name='session',
            index=models.Index(fields=['updated_at'], name='sessions_updated_fe65fc_idx'),
        ),
        migrations.AddField(
            model_name='rolesuser',
            name='role',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.Role'),
        ),
        migrations.AddField(
            model_name='rolesuser',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.User'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['name'], name='roles_name_a96913_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['authorizable_type'], name='roles_authori_fd60c5_idx'),
        ),
        migrations.AddIndex(
            model_name='role',
            index=models.Index(fields=['authorizable_id'], name='roles_authori_12a7ac_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='rawcontent',
            unique_together={('source_type', 'source_id')},
        ),
        migrations.AddIndex(
            model_name='playlistitem',
            index=models.Index(fields=['position'], name='playlist_it_positio_eba8b9_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['ancestry'], name='playlists_ancestr_114318_idx'),
        ),
        migrations.AddIndex(
            model_name='playlist',
            index=models.Index(fields=['position'], name='playlists_positio_80e9d5_idx'),
        ),
        migrations.AddIndex(
            model_name='metadata',
            index=models.Index(fields=['classifiable_id'], name='metadata_classif_a538ae_idx'),
        ),
        migrations.AddIndex(
            model_name='metadata',
            index=models.Index(fields=['classifiable_type'], name='metadata_classif_99dd7b_idx'),
        ),
        migrations.AddIndex(
            model_name='delayedjob',
            index=models.Index(fields=['priority', 'run_at'], name='delayed_job_priorit_1580e2_idx'),
        ),
        migrations.AddField(
            model_name='default',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, db_index=False, default=0, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='defaults', to='main.User'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='collaborators',
            field=models.ManyToManyField(related_name='casebooks', through='main.ContentCollaborator', to='main.User'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='copy_of',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='clones', to='main.ContentNode'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='root_user',
            field=models.ForeignKey(blank=True, db_constraint=False, db_index=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='casebooks_and_clones', to='main.User'),
        ),
        migrations.AddField(
            model_name='contentcollaborator',
            name='content',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.ContentNode'),
        ),
        migrations.AddField(
            model_name='contentcollaborator',
            name='user',
            field=models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='main.User'),
        ),
        migrations.AddField(
            model_name='contentannotation',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='annotations', to='main.ContentNode'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['ancestry'], name='collages_ancestr_7d1954_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['annotatable_id'], name='collages_annotat_751c5a_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['annotatable_type'], name='collages_annotat_ede5c2_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['created_at'], name='collages_created_fa53c6_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['name'], name='collages_name_ace9ed_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['public'], name='collages_public_e33d92_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['updated_at'], name='collages_updated_325c5f_idx'),
        ),
        migrations.AddIndex(
            model_name='collage',
            index=models.Index(fields=['word_count'], name='collages_word_co_4a3bfd_idx'),
        ),
        migrations.AddIndex(
            model_name='ckeditorasset',
            index=models.Index(fields=['assetable_type', 'assetable_id'], name='ckeditor_as_assetab_e9c565_idx'),
        ),
        migrations.AddIndex(
            model_name='ckeditorasset',
            index=models.Index(fields=['assetable_type', 'type', 'assetable_id'], name='ckeditor_as_assetab_cd8a5f_idx'),
        ),
        migrations.AddIndex(
            model_name='casecourt',
            index=models.Index(fields=['name'], name='case_courts_name_8b0202_idx'),
        ),
        migrations.AddIndex(
            model_name='casecourt',
            index=models.Index(fields=['name_abbreviation'], name='case_courts_name_ab_48fee9_idx'),
        ),
        migrations.AddField(
            model_name='case',
            name='case_court',
            field=models.ForeignKey(blank=True, db_constraint=False, db_index=False, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='cases', to='main.CaseCourt'),
        ),
        migrations.CreateModel(
            name='Casebook',
            fields=[
            ],
            options={
                'proxy': True,
                'constraints': [],
                'indexes': [],
            },
            bases=('main.contentnode',),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
            ],
            options={
                'proxy': True,
                'constraints': [],
                'indexes': [],
            },
            bases=('main.contentnode',),
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
            ],
            options={
                'proxy': True,
                'constraints': [],
                'indexes': [],
            },
            bases=('main.contentnode',),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['affiliation'], name='users_affilia_021728_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['attribution'], name='users_attribu_e12b66_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email_address'], name='users_email_a_f58eef_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['id'], name='users_id_6a15a7_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['last_request_at'], name='users_last_re_e753cf_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['login'], name='users_login_eda8f4_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['oauth_token'], name='users_oauth_t_1a9921_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['persistence_token'], name='users_persist_f5cd85_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['tz_name'], name='users_tz_name_4599bd_idx'),
        ),
        migrations.AddField(
            model_name='unpublishedrevision',
            name='casebook',
            field=models.ForeignKey(blank=True, db_constraint=False, db_index=False, help_text='The draft casebook.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='casebook_revisions', to='main.Casebook'),
        ),
        migrations.AddIndex(
            model_name='textblock',
            index=models.Index(fields=['created_at'], name='text_blocks_created_d06320_idx'),
        ),
        migrations.AddIndex(
            model_name='textblock',
            index=models.Index(fields=['name'], name='text_blocks_name_ce27bd_idx'),
        ),
        migrations.AddIndex(
            model_name='textblock',
            index=models.Index(fields=['updated_at'], name='text_blocks_updated_9ac1a4_idx'),
        ),
        migrations.AddField(
            model_name='contentnode',
            name='casebook',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contents', to='main.Casebook'),
        ),
        migrations.AlterUniqueTogether(
            name='contentcollaborator',
            unique_together={('user', 'content')},
        ),
        migrations.AddIndex(
            model_name='contentannotation',
            index=models.Index(fields=['resource', 'start_paragraph'], name='content_ann_resourc_a9fa0e_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['case_court'], name='cases_case_co_b58acb_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=django.contrib.postgres.indexes.GinIndex(fields=['citations'], name='cases_citatio_b60de2_gin'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['created_at'], name='cases_created_6583ad_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['decision_date'], name='cases_decisio_c6e645_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['name_abbreviation'], name='cases_name_ab_2ffab3_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['public'], name='cases_public_2d5cec_idx'),
        ),
        migrations.AddIndex(
            model_name='case',
            index=models.Index(fields=['updated_at'], name='cases_updated_395104_idx'),
        ),
        migrations.AddIndex(
            model_name='unpublishedrevision',
            index=models.Index(fields=['node', 'field'], name='unpublished_node_id_a9ebe9_idx'),
        ),
        migrations.AddIndex(
            model_name='contentnode',
            index=models.Index(fields=['ancestry'], name='content_nod_ancestr_752d0e_idx'),
        ),
        migrations.AddIndex(
            model_name='contentnode',
            index=models.Index(fields=['casebook', 'ordinals'], name='content_nod_caseboo_fd87f1_idx'),
        ),
        migrations.AddIndex(
            model_name='contentnode',
            index=models.Index(fields=['resource_type', 'resource_id'], name='content_nod_resourc_12667a_idx'),
        ),
    ]
